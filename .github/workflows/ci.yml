name: CI

# trigger when
on:
  push:
    branches: [ "main" ]
    paths:
      - 'flutter/**'
      
  # add the below if you also whant to trigger script on pull requests as well
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MY_SSH_REMOTE_SERVER: 'admin@rabbeh.giize.com'  # modify as your remote server 

    steps:
      - uses: actions/checkout@v4
      
      - name: PWD
        run: pwd

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: '3.24.1'
          
      - name: Analyzing project
        run: flutter analyze
        # change working directory based on your github repo structure where flutter code is 
        working-directory: flutter  

      - name: Install dependencies
        run: flutter pub get
        # change working directory based on your github repo structure where flutter code is
        working-directory: flutter
      

      - name: Enable web support
        run: flutter config --enable-web
        # change working directory based on your github repo structure where flutter code is
        working-directory: flutter

      - name: Build Web App
        run: flutter build web --release
        # change working directory based on your github repo structure where flutter code is
        working-directory: flutter

        # the build is copied in ansible folder to have the build ready to copy it 
      - name: Copy web build to Ansible template directory
        run: cp -R flutter/build/web ansible/template/webflutter

      # creating the ssh key based on the gitSecret saved 
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # modifying config file for the gitaction server to remote access your server
      - name: Set up SSH config
        run: |
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config

      ## testing if ssh working properly
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ envMY_SSH_REMOTE_SERVER } 'echo "SSH connection successful"'

      ## installing ansible
      - name: Install Ansible
        run: sudo apt-get install -y ansible 

      ## executing the ansible script
      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/inventory.ini  ansible/playbook.yaml 
      
